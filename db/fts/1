
#include "pix_codec.h"

#include <iostream>
#include <stdlib.h>

int main(int argc, char* argv[]) {

    uint32_t ulen = 10000;
    uint32_t clen = 100000;
    uint32_t* ubuf = new uint32_t[ulen];
    unsigned char* cbuf = new unsigned char[clen];
    std::vector<uint32_t> uvecv;

    std::cout << "Init" << std::endl;
    for (uint32_t i=0; i<ulen; ++i) {
        uint32_t base = (i>0 ? ubuf[i-1] : 0);
        ubuf[i] = base + (rand()%100) + 1;
        //std::cout << "ubuf[" << i << "] = " << ubuf[i] << std::endl;
    }

    std::cout << "Var compress" << std::endl;
    uint32_t n = mongo::PixCodec::varCompress(cbuf, clen, ubuf, 0, ulen);
    mongo::PixCodec::varUncompress(uvecv, cbuf, 0, n);

    for (uint32_t j=0; j<uvecv.size(); ++j) {
        if (uvecv[j] != ubuf[j])
            std::cout << "varCompress error: [" << j << "] "
                      << uvecv[j] << " != " << ubuf[j] << std::endl;
    }

    std::cout << "Gamma compress" << std::endl;
    n = mongo::PixCodec::gammaCompress(cbuf, clen, ubuf, 0, ulen);
    std::cout << "======================================" << std::endl;
    std::cout << "Gamma uncompress, n = " << n << std::endl;
    uvecv.clear();
    mongo::PixCodec::gammaUncompress(uvecv, cbuf, 0, n>>3);

    std::cout << "uvecv.size() = " << uvecv.size() << std::endl;
    for (uint32_t j=0; j<uvecv.size(); ++j) {
        if (uvecv[j] != ubuf[j])
            std::cout << "gammaCompress error: [" << j << "] "
                      << uvecv[j] << " != " << ubuf[j] << std::endl;
    }

}


/*
    static uint32_t varCompress(            // return: number of output bits    
        unsigned char* cbuf,                // output: array of packed bits
        uint32_t clen,                      // input:  output buffer capacity
        const std::vector<uint32_t>& uvec); // input:  vector to compress

    static uint32_t varCompress(            // return: number of output bits    
        unsigned char* cbuf,                // output: output buffer
        uint32_t offset,                    // input:  output buffer offset
        uint32_t max_offset,                // input:  output buffer capacity
        const std::vector<uint32_t>& uvec); // input:  vector to compress

    static uint32_t varCompress(            // return: number of output bytes
        unsigned char* cbuf,                // output: output array
        uint32_t offset,                    // input:  output segment offset
        uint32_t max_offset,                // input:  output buffer capacity
        const std::vector<uint32_t>& uvec,  // input:  vector to compress
        uint32_t uvec_offset,               // input:  input segment offset
        uint32_t uvec_len);                 // output: input segment length

    static uint32_t varCompress(            // return: number of output bytes
        std::vector<unsigned char>& cvec,   // output: vector of compressed values
        const std::vector<uint32_t>& uvec); // input:  vector to compress

    static uint32_t varCompress(            // return: number of output bytes
        std::vector<unsigned char>& cvec,   // output: vector of compressed values
        const std::vector<uint64_t>& uvec); // input:  vector to compress

    static void varUncompress(
        std::vector<uint32_t>& uvec,        // output: vector of uncompressed values
        std::vector<unsigned char>::const_iterator& begin,  // start position
        std::vector<unsigned char>::const_iterator& end);   // one past end position

    static void varUncompress(
        std::vector<uint32_t>& uvec,             // output: vector of uncompressed values
        const std::vector<unsigned char>& cvec,  // input:  vector to uncompress
        uint32_t coffset,                        // input:  starting index in cvec
        uint32_t clen);                          // input:  input count
  
    static void varUncompress(
        std::vector<uint64_t>& uvec,             // output: vector of uncompressed values
        const std::vector<unsigned char>& cvec,  // input:  vector to uncompress
        uint32_t coffset,                        // input:  starting index in cvec
        uint32_t clen);                          // input:  input count

    static uint32_t gammaCompress(      // return: number of output bits
        unsigned char* cbuf,            // output: array of packed bits
        uint32_t  clen,                 // input:  output buffer capacity
        uint32_t* ubuf,                 // input:  array to compress
        uint32_t uoffset,               // input:  start offset for input
        uint32_t ulen);                 // input:  input length

    static uint32_t gammaCompress(      // return: number of output bits    
        unsigned char* cbuf,            // output: array of packed bits
        uint32_t clen,                  // input:  output buffer capacity
        std::vector<uint32_t> uvec);    // input:  vector to compress

    static void gammaUncompress(
      std::vector<uint32_t>& uvec,      // output: vector of uncompressed values
      unsigned char* cbuf,              // input:  array of compressed values
      uint32_t coffset,                 // input:  start offset
      uint32_t clen);                   // input:  input byte count

    static void gammaUncompress(
        uint32_t* ubuf,                 // output: array of uncompressed values
        unsigned char* cbuf,            // input:  array of compressed values
        uint32_t cbuf_offset);          // input:  start offset

    static uint32_t deltaCompress(      // return: number of output bits
        unsigned char* cbuf,            // output: array of packed bits
        uint32_t  clen,                 // input:  output buffer capacity
        uint32_t* ubuf,                 // input:  array to compress
        uint32_t  uoffset,              // input:  start offset for input
        uint32_t  ulen);                // input:  input length

    static uint32_t deltaCompress(      // return: number of output bits
        unsigned char* cbuf,            // output: array of packed bits
        uint32_t clen,                  // input:  start offset for output
        std::vector<uint32_t> uvec);    // input:  vector to compress

    static void deltaUncompress(
        std::vector<uint32_t>& uvec,    // output: vector of uncompressed values
        unsigned char* cbuf,            // input:  array of compressed values
        uint32_t coffset,               // input:  start offset
        uint32_t clen);                 // input:  input byte count

    static void deltaUncompress(
        uint32_t* ubuf,                 // output: array of uncompressed values
        unsigned char* cbuf,            // input:  array of compressed values
        uint32_t cbuf_offset);          // input:  start offset

    static uint32_t bernoulliCompress(  // return: number of output bits
        unsigned char* cbuf,            // output: array of packed bits
        uint32_t cbuf_offset,           // input:  start offset for output
        uint32_t* ubuf,                 // input:  array to compress
        uint32_t ubuf_offset);          // input:  start offset for input
    
    static uint32_t bernoulliCompress(  // return: number of output bits
        unsigned char* cbuf,            // output: array of packed bits
        uint32_t cbuf_offset,           // input:  start offset for output
        std::vector<uint32_t> uvec);    // input:  vector to compress
  
    static void bernoulliUncompress(
        std::vector<uint32_t> uvec,     // output: vector of uncompressed values
        unsigned char* cbuf,            // input:  array of compressed values
        uint32_t cbuf_offset );         // input:  start offset
  
    static void bernoulliUncompress(
        uint32_t* ubuf,                 // output: array of uncompressed values
        unsigned char* cbuf,            // input:  array of compressed values
        uint32_t cbuf_offset);          // input:  start offset
*/
